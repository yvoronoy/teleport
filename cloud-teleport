#!/usr/bin/env bash

function teleport_send_cmd()
{
  tsh --proxy=leap.magento.cloud:10443 --user="${TELEPORT_USER}" ssh ${PROJECT_ID#*.}@${TELEPORT_SERVER}${PROJECT_ID%_stg}.ent.magento.cloud ${1}
}
function teleport_download_file()
{
  tsh --proxy=leap.magento.cloud:10443 --user="${TELEPORT_USER}" scp ${PROJECT_ID#*.}@${PROJECT_ID%_stg}.ent.magento.cloud:${1} ./ ;
}

function teleport_ssh()
{
    teleport_send_cmd
}

function teleport_scp()
{
    teleport_download_file $1 && echo "${1} was downloaded";
}

function dump_by_type()
{
    local type=$1
    type=$(validateType ${type})
    echo "Starting ${type} backup..."
    teleport_send_cmd "php bin/magento support:backup:${type};"; {
    dumpsDirectory="var/support/"
    dumpFiles=($(teleport_send_cmd "ls -t ${dumpsDirectory} | head -n 1"))
    for file in "${dumpFiles[@]}"
    do
      teleport_download_file "${dumpsDirectory}${file}" && echo "${file} was downloaded"
      teleport_send_cmd "rm ${dumpsDirectory}${file}" && echo "${file} was removed from the remote server"
    done
  }
}

function dump()
{
  showMagentoVersion
  validateIfProcessExists
  if [ -z "$1" ]
  then
  dump_by_type "code"
  dump_by_type "db"
  else
    dump_by_type $1
  fi
  removeSupportBackupFlag
}

function showMagentoVersion()
{
  teleport_send_cmd "php bin/magento -V"
}

function validateType()
{
    local type=$1
    case "$type" in
      db) type="db${IGNORE_SANITIZE}"
        ;;
      code)
        ;;
      *) echo "Invalid type: specify code or db";
         exit 1;
        ;;
    esac
    echo ${type}
}

function validateIfProcessExists()
{
    local output=$(teleport_send_cmd "test -f /tmp/.magento.support.backup && echo found")
    if [ "${output}" ]
    then
        echo "Please wait a few minutes for another process will be finished";
        exit 1;
    fi
    teleport_send_cmd "touch /tmp/.magento.support.backup"
}

function removeSupportBackupFlag()
{
    teleport_send_cmd "rm /tmp/.magento.support.backup"
}

function help()
{
  cat <<EOF
Usage : $(basename "$0") PROJECT_ID [ssh|dump] [-d|--dump=(code|db|scp file_path)] [-u|--user=(teleport username)] [-s|--server=(1|2|3)]
Options:
 - PROJECT_ID - required argument, cloud project ID
 - ssh - Make SSH connection to remote cloud server
 - dump - Create and download code and database dumps
 - scp - Download file from remote cloud server
 - -d|--dump code|db - make only a code or db dump
 - -u|--user username - if you want to specify different username for cloud, current user by default
 - -s|--server 1,2 or 3 - open ssh connection to a specified server
 - -i|--ignore-sanitize - generate dumps without sanitizing customer data
EOF
  exit 64
}

function processoptions()
{
  while [[ $# -gt 0 ]]
  do
    case "$1" in
      ssh)
        TELEPORT_COMMAND="teleport_ssh"
      ;;
      scp)
        TELEPORT_COMMAND="teleport_scp ${2}"
        shift
      ;;
      dump)
        TELEPORT_COMMAND="dump"
      ;;
      -i|--ignore-sanitize)
        IGNORE_SANITIZE=' --ignore-sanitize'
      ;;
      -d|--dump)
        TELEPORT_COMMAND="dump ${2}"
        shift
      ;;
      -u|--user)
        TELEPORT_USER="$2"
        shift
      ;;
      -s|--server)
        TELEPORT_SERVER="$2."
        shift
      ;;
      -h|--help)
        TELEPORT_COMMAND="help"
        shift
      ;;
      esac
      shift
  done
}

IGNORE_SANITIZE=
TELEPORT_COMMAND=help
[ ! "${TELEPORT_USER}" ] && TELEPORT_USER=${USER}
[[ $1 != *"-h"* ]] && PROJECT_ID=$1
shift;
if [ "$PROJECT_ID" ]
then
    TELEPORT_COMMAND=teleport_ssh
fi

processoptions "$@"
${TELEPORT_COMMAND}
exit 0;
